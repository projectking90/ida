<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- mapper 태그 선언 -->
<mapper namespace="system.ida.dao.IngredientDAO">
	<sql id="ingredientWhere">
			<if test="keyword!=null and keyword.length()>0">
					and (
						upper(i_no) like upper('%${keyword}%')
						<!-- 서브쿼리로 인해 띄우는 것들 먹게 하는 방법 -->
						or upper(ia_name) like upper('%${keyword}%')
						or upper(ib_name) like upper('%${keyword}%')
						or upper(io_name) like upper('%${keyword}%')
						<!-- ============================= -->
						or upper(i_size) like upper('%${keyword}%')
						or upper(i_price) like upper('%${keyword}%')
						or upper(reg_date) like upper('%${keyword}%')	
					)
			</if>
	</sql>
	
	<!-- 가게에 등록된 식자재 목록을 가져오는 select 태그 -->
	<select id="getIngredientList" parameterType="system.ida.dto.IngredientSearchDTO" resultType="system.ida.dto.IngredientDTO">
		select
			i.i_no as "i_no"
			<!-- ,i.ia_code as "ia_code" -->
			,(select a.ia_name from code_ingredient_alpha a where a.ia_code=i.ia_code) as  "ia_name"
			,(select b.ib_name from code_ingredient_beta b where b.ib_code=i.ib_code) as "ib_name"
			,(select o.io_name from code_ingredient_origin o where o.io_code=i.io_code) as"io_name"
			,i.i_name as  "i_name"
			,i.i_size as  "i_size"
			,to_char(i.i_price, '9,999,999,999')  as  "i_price"
			,to_char(i.reg_date,'yyyy-mm-dd(dy) hh:mi') as   "reg_date"
			,i.is_del   as  "is_del"
			
		from ingredient i 
		where i.is_del = 'F'
			and s_no = (select s_no from store where s_id=#{s_id})
			<include refid="ingredientWhere"/>
	</select>
	
	<!-- 등록된 식자재의 총 개수를 구하는 select 태그 -->
	<select id="getIngredientListAllCnt" parameterType="system.ida.dto.IngredientSearchDTO" resultType="int">
		select
			count(*)
		from
		ingredient
		where is_del='F'
		and s_no = (select s_no from store where s_id = #{s_id})
		<include refid="ingredientWhere"/>
	</select>
	
	
	<!-- 대분류 목록을 검색하는 select 태그 -->
	<select id='getCodeIngAlpha' resultType="system.ida.dto.Code_IngredientAlphaDTO">
		select
			 ia_name as "ia_name"
		from
			code_ingredient_alpha
	</select>
	
	<!-- 소분류 목록을 검색하는 select 태그 -->
	<select id='getCodeIngBeta' resultType="system.ida.dto.Code_IngredientBetaDTO">
		select
			 ib_name
		from
			code_ingredient_beta
	</select>
	

	<!-- 원산지 목록을 검색하는 select 태그 -->
	<select id='getCodeIngOrigin' resultType="system.ida.dto.Code_IngredientOriginDTO">
		select
			 io_name
		from
			code_ingredient_origin
	</select>
	
	<!-- 알레르기 목록을 검색하는 select 태그 -->
	<select id='getCodeIngAllergie' resultType="system.ida.dto.Code_IngredientAllergieDTO">
		select
			 a_name
		from
			code_allergie
	</select>
	
	<!-- 식자재 insert -->
	<insert id="insertIngredient" parameterType="system.ida.dto.IngredientDTO">
		insert into ingredient(
			i_no
			,ia_code
			,ib_code
			,io_code
			,i_name
			,i_size
			,i_price
			,s_no
		)values(
			(select nvl(max(i_no),0)+1 from ingredient)
			,(select ia_code from code_ingredient_alpha where ia_name=#{ia_name})
			,(select ib_code from code_ingredient_beta where ib_name=#{ib_name})
			,(select io_code from code_ingredient_origin where io_name=#{io_name})
			,#{i_name}
			,#{i_size}
			,to_number(#{i_price}, 9999999999)
			,(select s_no from store where s_id=#{s_id})
		)
	</insert>
	
	<!-- 식자재 update -->
	<update id="updateIngredient" parameterType="hashmap">
		update ingredient set
		ia_code=(select ia_code from code_ingredient_alpha where ia_name=#{ia_name})
		,ib_code=(select ib_code from code_ingredient_beta where ib_name=#{ib_name})
		,io_code=(select io_code from code_ingredient_origin where io_name=#{io_name})
		,i_name  = #{i_name}
		,i_size  = #{i_size}
		,i_price = to_number(${i_price}, 9999999999)
		where i_no = ${i_no}
	</update>
	
	<!-- 식자재 삭제  -->
	<update id="deleteIngredient" parameterType="hashmap">
		update ingredient set
		is_del = 'T'
		where i_no = ${i_no}
	</update>
	
	<!-- 추가한 식자재 기록하기 -->
	<insert id="insertIngRecord" parameterType="system.ida.dto.IngredientDTO">
		insert into ingredient_record(
			i_no
			,i_price
		) values (
			(select i_no from ingredient where i_no=${i_no})
			,to_number(${i_price}, 9999999999)
		)
	</insert>
	
	<!-- 수정한 식자재 기록하기 -->
	<insert id="updateIngRecord" parameterType="hashmap">
		insert into ingredient_record(
			i_no
			,i_price
		) values (
			${i_no}
			to_number(${change_i_price}, 9999999999)
		)
	</insert>
	
<!--  삭제한 식자재 기록하기 
	<insert id="deleteIngRecord" parameterType="hashmap">
		insert into ingredient_record(
			i_no
			,i_price
		) values (
			(select i_no from ingredient where i_no=${i_no} and is_del='T')
			,to_number(${i_price}, 9999999999)
		)
	</insert> -->
	
	<select id="getWeekData" parameterType="String" resultType="hashmap">
	select
		count(i_name) ||''  "data1"
		, i_name
		, to_char(reg_date, 'ww')  "LABEL"
	from (select
		s_no as "S_NO", reg_date as "REG_DATE", i_name as "I_NAME"
	from ingredient )
		where
			s_no = (select s_no from store where s_id=#{s_id}) 
		group by
			to_char(reg_date, 'ww'), i_name
	</select>
	
	<!-- <select id="getMonthData" parameterType="String" resultType="hashmap"> -->
	
<!-- 	select
		(select s_no from store where s_id=#{s_id})
		,i_name    "label"
		,ir.i_price  "data1"
		,to_char(i.reg_date,'mm') "labels"
	from ingredient_day
	order by to_char(i.reg_date,'mm')
	</select>
	 -->
	<select id="getIngAnlList" parameterType="system.ida.dto.IngredientSearchDTO" resultType="system.ida.dto.IngredientDTO">
		select
			i.i_no as "i_no"
			<!-- ,i.ia_code as "ia_code" -->
			,(select a.ia_name from code_ingredient_alpha a where a.ia_code=i.ia_code) as  "ia_name"
			,(select b.ib_name from code_ingredient_beta b where b.ib_code=i.ib_code) as "ib_name"
			,(select o.io_name from code_ingredient_origin o where o.io_code=i.io_code) as"io_name"
			,i.i_name as  "i_name"
			,i.i_size as  "i_size"
			,to_char(i.i_price, '9,999,999,999')  as  "i_price"
			,to_char(i.reg_date,'yyyy-mm-dd(dy) hh:mi') as   "reg_date"
			,i.is_del   as  "is_del"
			
		from ingredient i 
		where i.is_del = 'F'
			and s_no = (select s_no from store where s_id=#{s_id})
			<include refid="ingredientWhere"/>
	</select>
</mapper>